<% if (is_full) { %>
import { Controller, Delete, Get, Post, Put, Body, Param, ParseIntPipe } from '@nestjs/common';
import { DeleteResult, UpdateResult } from 'typeorm';
import { <%= table.table_uppercase_name %>Entity } from './../../entities/<%= table.table_name %>.entity';
import { <%= table.table_uppercase_name %>Service } from './../../services/<%= table.table_name %>/<%= table.table_name %>.service';
<% } else { %>
import { Controller } from '@nestjs/common';
<% } %>

@Controller('<%= table.table_name %>')
export class <%= table.table_uppercase_name %>Controller {
  <% if (is_full) { %>
  constructor(private readonly <%= table.table_name %>Service: <%= table.table_uppercase_name %>Service) {}

  @Post()
  async create<%= table.table_uppercase_name %>(@Body() data: <%= table.table_uppercase_name %>Entity): Promise<<%= table.table_uppercase_name %>Entity> {
    return await this.<%= table.table_name %>Service.create<%= table.table_uppercase_name %>(data)
  }

  @Delete(':id')
  async delete<%= table.table_uppercase_name %>ById(@Param('id', new ParseIntPipe()) id: number): Promise<DeleteResult> {
    return await this.<%= table.table_name %>Service.delete<%= table.table_uppercase_name %>ById(id)
  }

  @Put(':id')
  async update<%= table.table_uppercase_name %>ById(@Param('id', new ParseIntPipe()) id: number, @Body() data: <%= table.table_uppercase_name %>Entity): Promise<UpdateResult> {
    return await this.<%= table.table_name %>Service.update<%= table.table_uppercase_name %>ById(id, data)
  }

  @Get()
  async find<%= table.table_uppercase_name %>List(): Promise<<%= table.table_uppercase_name %>Entity[]> {
    return await this.<%= table.table_name %>Service.find<%= table.table_uppercase_name %>List()
  }

  @Get(':id')
  async find<%= table.table_uppercase_name %>ById(@Param('id', new ParseIntPipe()) id: number): Promise<<%= table.table_uppercase_name %>Entity> {
    return await this.<%= table.table_name %>Service.find<%= table.table_uppercase_name %>ById(id)
  }
  <% } %>
}
